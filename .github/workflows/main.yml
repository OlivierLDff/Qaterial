name: CI

on:
  push:
    branches:
      - master
      - ci

  pull_request:
    branches:
      - master

jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macOS-latest, ubuntu-latest]
        version: ['5.15.0']
    steps:
      - uses: actions/checkout@v2

      - uses: lukka/get-cmake@latest

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/Qt-${{ runner.os }}-${{ matrix.version }}
          key: ${{ runner.os }}-QtCache-${{ matrix.version }}-modules

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.version }}
          dir: ${{ github.workspace }}/Qt-${{ runner.os }}-${{ matrix.version }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          modules: 'qtcharts qtdatavis3d qtvirtualkeyboard qtwebengine qtquick3d'

      - name: Configure
        run: |
          mkdir -p build
          cmake -DQATERIAL_ENABLE_HOTRELOAD=ON -DQATERIAL_ENABLE_TOOLS=ON -DQATERIAL_ENABLE_TESTS=ON -DCMAKE_BUILD_TYPE="Release" -B build -S .
        shell: bash

      - name: Build Qaterial
        run: cmake --build build --target "Qaterial" --config "Release" -j

      - name: Build QaterialHotReload
        run: cmake --build build --target "QaterialHotReload" --config "Release" -j

      - name: Build QaterialHotReload Installer
        run: cmake --build build --target "QaterialHotReloadInstallerX64" --config "Release" -j
        if: contains(matrix.os, 'windows')

      - name: Upload QaterialHotReload Installer
        uses: actions/upload-artifact@v2
        with:
          name: Qaterial HotReloader Installer X64 Windows (${{ matrix.version }})
          path: build/tools/HotReload/QaterialHotReloadInstallerX64Release.exe
        if: contains(matrix.os, 'windows')

      - name: Build QaterialTestLoader
        run: cmake --build build --target "QaterialTestLoader" --config "Release" -j

      - name: Run Unit tests
        run: cd build && ctest --build-config "Release" --progress --verbose --parallel 12
        if: "!contains(matrix.os, 'ubuntu')"

      - name: Run Unit tests
        run: |
          sudo apt install libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-xinerama0 libxcb-keysyms1 libxcb1 libxcb-render-util0
          cd build
          xvfb-run ctest --build-config "Release" --progress --verbose --parallel 12
        if: contains(matrix.os, 'ubuntu')
